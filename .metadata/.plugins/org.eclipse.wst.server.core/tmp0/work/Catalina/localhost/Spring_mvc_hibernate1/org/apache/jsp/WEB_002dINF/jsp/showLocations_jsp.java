/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.59
 * Generated at: 2015-04-26 18:11:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class showLocations_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("<title>Branch Locations</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("#map_wrapper {\r\n");
      out.write("    height: 400px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#map {\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    height: 100%;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var latLngMap = new Object();\r\n");
      out.write("function loadMap() {\r\n");
      out.write("    // Asynchronously Load the map API \r\n");
      out.write("    var script = document.createElement('script');\r\n");
      out.write("    script.src = \"http://maps.googleapis.com/maps/api/js?sensor=false&callback=initialize\";\r\n");
      out.write("    document.body.appendChild(script);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function prepareLatlngMap(key, value) {\r\n");
      out.write("\tlatLngMap[key] = value;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function initialize() {\r\n");
      out.write("    var map;\r\n");
      out.write("    var bounds = new google.maps.LatLngBounds();\r\n");
      out.write("    var mapOptions = {\r\n");
      out.write("        mapTypeId: google.maps.MapTypeId.ROADMAP\r\n");
      out.write("    };\r\n");
      out.write("                    \r\n");
      out.write("    // Display a map on the page\r\n");
      out.write("    map = new google.maps.Map(document.getElementById(\"map\"), mapOptions);\r\n");
      out.write("    map.setTilt(45);\r\n");
      out.write("        \r\n");
      out.write("    // Multiple Markers\r\n");
      out.write("\t\r\n");
      out.write("\t//latLngMap[\"Pithoragarh, Uttarakhand, India\"] = \"29.582861,80.218185\";\r\n");
      out.write("\t//latLngMap[\"Pipariya, Madhya Pradesh, India\"] = \"22.762886,78.352478\";\r\n");
      out.write("\t//latLngMap[\"Tiruvannamalai, Tamil Nadu, India\"] = \"12.228628,79.066544\";\r\n");
      out.write("                        \r\n");
      out.write("    // Pop up Window Content\r\n");
      out.write("    var infoWindowContent = [\r\n");
      out.write("        ['<div class=\"info_content\">' +\r\n");
      out.write("        '<h3>London Eye</h3>' +\r\n");
      out.write("        '<p>The London Eye is a giant Ferris wheel situated on the banks of the River Thames. The entire structure is 135 metres (443 ft) tall and the wheel has a diameter of 120 metres (394 ft).</p>' +        '</div>'],\r\n");
      out.write("        ['<div class=\"info_content\">' +\r\n");
      out.write("        '<h3>Palace of Westminster</h3>' +\r\n");
      out.write("        '<p>The Palace of Westminster is the meeting place of the House of Commons and the House of Lords, the two houses of the Parliament of the United Kingdom. Commonly known as the Houses of Parliament after its tenants.</p>' +\r\n");
      out.write("        '</div>']\r\n");
      out.write("    ];\r\n");
      out.write("        \r\n");
      out.write("    // Display multiple markers on a map\r\n");
      out.write("    var infoWindow = new google.maps.InfoWindow(), marker, i;\r\n");
      out.write("    \r\n");
      out.write("    // Loop through our array of markers & place each one on the map  \r\n");
      out.write("    var i = 0;\r\n");
      out.write("\tfor(var key in latLngMap) {\r\n");
      out.write("\t\tconsole.log(\"key : \"  + key);\r\n");
      out.write("\t\tvar arr = latLngMap[key].split(\",\");\r\n");
      out.write("\t\tconsole.log(\"Lat : \" + arr[0]);\r\n");
      out.write("\t\tconsole.log(\"Lon : \" + arr[1]);\r\n");
      out.write("        var position = new google.maps.LatLng(arr[0], arr[1]);\r\n");
      out.write("        bounds.extend(position);\r\n");
      out.write("        marker = new google.maps.Marker({\r\n");
      out.write("            position: position,\r\n");
      out.write("            map: map,\r\n");
      out.write("            title: key\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        // Allow each marker to have an pop window    \r\n");
      out.write("        google.maps.event.addListener(marker, 'click', (function(marker, i) {\r\n");
      out.write("            return function() {\r\n");
      out.write("                infoWindow.setContent(infoWindowContent[i][0]);\r\n");
      out.write("                infoWindow.open(map, marker);\r\n");
      out.write("            }\r\n");
      out.write("        })(marker, i));\r\n");
      out.write("\r\n");
      out.write("        // Automatically center the map fitting all markers on the screen\r\n");
      out.write("        map.fitBounds(bounds);\r\n");
      out.write("\t\ti++;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Override our map zoom level once our fitBounds function runs (Make sure it only runs once)\r\n");
      out.write("    var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function(event) {\r\n");
      out.write("        this.setZoom(4);\r\n");
      out.write("        google.maps.event.removeListener(boundsListener);\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("window.onload = function () {\r\n");
      out.write("\tloadMap();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"map_wrapper\">\r\n");
      out.write("    <div id=\"map\" class=\"mapping\"></div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f0.setParent(null);
    // /WEB-INF/jsp/showLocations.jsp(103,0) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/jsp/showLocations.jsp(103,0) '${latLngMap}'",_el_expressionfactory.createValueExpression(_jspx_page_context.getELContext(),"${latLngMap}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    // /WEB-INF/jsp/showLocations.jsp(103,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setVar("mapObj");
    int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
      if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\tlatLngMap[\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mapObj.key}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
          out.write("\"] = \"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mapObj.value}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
          out.write("\";\r\n");
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f0.doFinally();
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
    }
    return false;
  }
}
